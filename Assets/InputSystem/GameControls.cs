//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Minigame"",
            ""id"": ""ec44e046-3d8c-46d2-9e83-ff2fce11fc5a"",
            ""actions"": [
                {
                    ""name"": ""MovePlayer1"",
                    ""type"": ""Value"",
                    ""id"": ""638617ec-2bc5-4508-a9e3-d6f2f69270f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovePlayer2"",
                    ""type"": ""Value"",
                    ""id"": ""d276534d-7845-4a68-b64c-093ddda7e7aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpPlayer1"",
                    ""type"": ""Button"",
                    ""id"": ""ae1c202b-13a5-44eb-bd18-5aa72cb390b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpPlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""9dfed44b-98ac-45e5-9b8e-9cc07d448fb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintPlayer1"",
                    ""type"": ""Button"",
                    ""id"": ""a87039f0-1e7b-4e3c-a4ac-ad05797b4f53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintPlayer2"",
                    ""type"": ""Button"",
                    ""id"": ""c4731535-7a62-42a2-acb2-1d49d5c31f14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1a3dc1e4-fdca-4b2b-89ea-de3f6e4dd1ee"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7aa1f8f4-33ed-4005-bad8-758dfc2f000f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cb4e55cc-e4a6-4b3a-a47e-1b1a4a11e1e2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9bcd96f8-3518-4f9c-9ada-ffb9b3119e0e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5c302de9-bc0c-4519-b32d-5efc63ca7c2a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b15d0eda-daa3-4daf-a66f-33864885e8e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f11e9083-5d76-497f-8b36-477eeb67c729"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintPlayer1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""IJKL"",
                    ""id"": ""e85bf3d9-efb1-4548-be96-0a3838a82804"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a2458c45-8642-4f41-9fcd-e3a7cf841ffd"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bb715256-3dee-447a-a1dd-4adc75e1dd2d"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""39f82830-79da-49ed-8428-d75657cbea87"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""23750373-2acb-4cff-9ee4-26fa0fc70acf"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""506c951f-0a89-416a-9bae-3c8d211288a7"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""976902c6-6bf5-4dc7-9b45-7aec50ce1954"",
                    ""path"": ""<Keyboard>/semicolon"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintPlayer2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Board"",
            ""id"": ""0f39ab16-d9d5-4ddd-9018-1403eb94cd23"",
            ""actions"": [
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""2547308e-7166-41d3-abd6-61e3782d2cfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""905ebc00-a340-4263-9402-67827321ae0b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Minigame
        m_Minigame = asset.FindActionMap("Minigame", throwIfNotFound: true);
        m_Minigame_MovePlayer1 = m_Minigame.FindAction("MovePlayer1", throwIfNotFound: true);
        m_Minigame_MovePlayer2 = m_Minigame.FindAction("MovePlayer2", throwIfNotFound: true);
        m_Minigame_JumpPlayer1 = m_Minigame.FindAction("JumpPlayer1", throwIfNotFound: true);
        m_Minigame_JumpPlayer2 = m_Minigame.FindAction("JumpPlayer2", throwIfNotFound: true);
        m_Minigame_SprintPlayer1 = m_Minigame.FindAction("SprintPlayer1", throwIfNotFound: true);
        m_Minigame_SprintPlayer2 = m_Minigame.FindAction("SprintPlayer2", throwIfNotFound: true);
        // Board
        m_Board = asset.FindActionMap("Board", throwIfNotFound: true);
        m_Board_Roll = m_Board.FindAction("Roll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Minigame
    private readonly InputActionMap m_Minigame;
    private List<IMinigameActions> m_MinigameActionsCallbackInterfaces = new List<IMinigameActions>();
    private readonly InputAction m_Minigame_MovePlayer1;
    private readonly InputAction m_Minigame_MovePlayer2;
    private readonly InputAction m_Minigame_JumpPlayer1;
    private readonly InputAction m_Minigame_JumpPlayer2;
    private readonly InputAction m_Minigame_SprintPlayer1;
    private readonly InputAction m_Minigame_SprintPlayer2;
    public struct MinigameActions
    {
        private @GameControls m_Wrapper;
        public MinigameActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayer1 => m_Wrapper.m_Minigame_MovePlayer1;
        public InputAction @MovePlayer2 => m_Wrapper.m_Minigame_MovePlayer2;
        public InputAction @JumpPlayer1 => m_Wrapper.m_Minigame_JumpPlayer1;
        public InputAction @JumpPlayer2 => m_Wrapper.m_Minigame_JumpPlayer2;
        public InputAction @SprintPlayer1 => m_Wrapper.m_Minigame_SprintPlayer1;
        public InputAction @SprintPlayer2 => m_Wrapper.m_Minigame_SprintPlayer2;
        public InputActionMap Get() { return m_Wrapper.m_Minigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MinigameActions set) { return set.Get(); }
        public void AddCallbacks(IMinigameActions instance)
        {
            if (instance == null || m_Wrapper.m_MinigameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MinigameActionsCallbackInterfaces.Add(instance);
            @MovePlayer1.started += instance.OnMovePlayer1;
            @MovePlayer1.performed += instance.OnMovePlayer1;
            @MovePlayer1.canceled += instance.OnMovePlayer1;
            @MovePlayer2.started += instance.OnMovePlayer2;
            @MovePlayer2.performed += instance.OnMovePlayer2;
            @MovePlayer2.canceled += instance.OnMovePlayer2;
            @JumpPlayer1.started += instance.OnJumpPlayer1;
            @JumpPlayer1.performed += instance.OnJumpPlayer1;
            @JumpPlayer1.canceled += instance.OnJumpPlayer1;
            @JumpPlayer2.started += instance.OnJumpPlayer2;
            @JumpPlayer2.performed += instance.OnJumpPlayer2;
            @JumpPlayer2.canceled += instance.OnJumpPlayer2;
            @SprintPlayer1.started += instance.OnSprintPlayer1;
            @SprintPlayer1.performed += instance.OnSprintPlayer1;
            @SprintPlayer1.canceled += instance.OnSprintPlayer1;
            @SprintPlayer2.started += instance.OnSprintPlayer2;
            @SprintPlayer2.performed += instance.OnSprintPlayer2;
            @SprintPlayer2.canceled += instance.OnSprintPlayer2;
        }

        private void UnregisterCallbacks(IMinigameActions instance)
        {
            @MovePlayer1.started -= instance.OnMovePlayer1;
            @MovePlayer1.performed -= instance.OnMovePlayer1;
            @MovePlayer1.canceled -= instance.OnMovePlayer1;
            @MovePlayer2.started -= instance.OnMovePlayer2;
            @MovePlayer2.performed -= instance.OnMovePlayer2;
            @MovePlayer2.canceled -= instance.OnMovePlayer2;
            @JumpPlayer1.started -= instance.OnJumpPlayer1;
            @JumpPlayer1.performed -= instance.OnJumpPlayer1;
            @JumpPlayer1.canceled -= instance.OnJumpPlayer1;
            @JumpPlayer2.started -= instance.OnJumpPlayer2;
            @JumpPlayer2.performed -= instance.OnJumpPlayer2;
            @JumpPlayer2.canceled -= instance.OnJumpPlayer2;
            @SprintPlayer1.started -= instance.OnSprintPlayer1;
            @SprintPlayer1.performed -= instance.OnSprintPlayer1;
            @SprintPlayer1.canceled -= instance.OnSprintPlayer1;
            @SprintPlayer2.started -= instance.OnSprintPlayer2;
            @SprintPlayer2.performed -= instance.OnSprintPlayer2;
            @SprintPlayer2.canceled -= instance.OnSprintPlayer2;
        }

        public void RemoveCallbacks(IMinigameActions instance)
        {
            if (m_Wrapper.m_MinigameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMinigameActions instance)
        {
            foreach (var item in m_Wrapper.m_MinigameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MinigameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MinigameActions @Minigame => new MinigameActions(this);

    // Board
    private readonly InputActionMap m_Board;
    private List<IBoardActions> m_BoardActionsCallbackInterfaces = new List<IBoardActions>();
    private readonly InputAction m_Board_Roll;
    public struct BoardActions
    {
        private @GameControls m_Wrapper;
        public BoardActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Roll => m_Wrapper.m_Board_Roll;
        public InputActionMap Get() { return m_Wrapper.m_Board; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoardActions set) { return set.Get(); }
        public void AddCallbacks(IBoardActions instance)
        {
            if (instance == null || m_Wrapper.m_BoardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoardActionsCallbackInterfaces.Add(instance);
            @Roll.started += instance.OnRoll;
            @Roll.performed += instance.OnRoll;
            @Roll.canceled += instance.OnRoll;
        }

        private void UnregisterCallbacks(IBoardActions instance)
        {
            @Roll.started -= instance.OnRoll;
            @Roll.performed -= instance.OnRoll;
            @Roll.canceled -= instance.OnRoll;
        }

        public void RemoveCallbacks(IBoardActions instance)
        {
            if (m_Wrapper.m_BoardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoardActions instance)
        {
            foreach (var item in m_Wrapper.m_BoardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoardActions @Board => new BoardActions(this);
    public interface IMinigameActions
    {
        void OnMovePlayer1(InputAction.CallbackContext context);
        void OnMovePlayer2(InputAction.CallbackContext context);
        void OnJumpPlayer1(InputAction.CallbackContext context);
        void OnJumpPlayer2(InputAction.CallbackContext context);
        void OnSprintPlayer1(InputAction.CallbackContext context);
        void OnSprintPlayer2(InputAction.CallbackContext context);
    }
    public interface IBoardActions
    {
        void OnRoll(InputAction.CallbackContext context);
    }
}
